{% extends 'base.html.twig' %}

{% block title %}Piluleo{% endblock %}

{% block stylesheets %}
    {{ parent() }}
    <link href="https://cdn.jsdelivr.net/npm/daisyui@3.1.0/dist/full.css" rel="stylesheet" type="text/css" />
    <script src="https://cdn.tailwindcss.com"></script>
    <link href="https://cdn.jsdelivr.net/npm/remixicon@3.5.0/fonts/remixicon.css" rel="stylesheet">
    <script src="https://unpkg.com/lucide@latest"></script>
{% endblock %}

{% block javascripts %}
    {{ parent() }}
    <script src="https://cdn.jsdelivr.net/npm/dayjs@1.11.10/dayjs.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/dayjs@1.11.10/locale/fr.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/dayjs@1.11.10/plugin/updateLocale.js"></script>
    <script>
        tailwind.config = {
            darkMode: "class",
            theme: {
                extend: {
                    backgroundColor: {
                        dark: "black",
                    },
                },
            },
        };

        document.addEventListener("DOMContentLoaded", function () {
            const themeToggle = document.querySelector(".theme-controller");
            const htmlElement = document.documentElement;

            function applyTheme(isDark) {
                if (isDark) {
                    htmlElement.classList.add("dark");
                    htmlElement.setAttribute("data-theme", "black");
                    themeToggle.checked = true;
                } else {
                    htmlElement.classList.remove("dark");
                    htmlElement.setAttribute("data-theme", "light");
                    themeToggle.checked = false;
                }
            }

            const savedTheme = localStorage.getItem("theme");
            if (savedTheme) {
                applyTheme(savedTheme === "dark");
            }

            themeToggle.addEventListener("change", function () {
                const isDark = this.checked;
                applyTheme(isDark);
                localStorage.setItem("theme", isDark ? "dark" : "light");
            });

            lucide.createIcons();

            const toggleButton = document.getElementById('togglePilulier');
            let isOpen = false;
            toggleButton.addEventListener('click', () => {
                isOpen = !isOpen;
                toggleButton.textContent = isOpen ? 'Fermer pilulier' : 'Ouvrir pilulier';
                toggleButton.classList.toggle('bg-orange-500');
                toggleButton.classList.toggle('bg-red-500');
                // Redirection vers la route appropriée
                window.location.href = isOpen 
                    ? "{{ path('app_pilulier_close', {'id': pilulier.id}) }}"
                    : "{{ path('app_pilulier_open', {'id': pilulier.id}) }}";
            });

            document.getElementById('emergencyButton').addEventListener('change', function() {
                console.log('Emergency button:', this.checked ? 'activated' : 'deactivated');
                // Ici, vous pouvez ajouter la logique pour mettre à jour l'état du bouton d'urgence
            });

            // Styliser le bouton de suppression
            const deleteForm = document.querySelector('form[name="delete_form"]');
            if (deleteForm) {
                const deleteButton = deleteForm.querySelector('button[type="submit"]');
                if (deleteButton) {
                    deleteButton.className = 'w-full bg-red-500 hover:bg-red-600 text-white font-bold py-2 px-4 rounded transition duration-300 flex items-center justify-center';
                    deleteButton.innerHTML = '<i data-lucide="trash-2" class="w-4 h-4 mr-2"></i> Supprimer';
                    lucide.createIcons();
                }
            }
        });

        function handleAction(action) {
            console.log(`Action triggered: ${action}`);
            switch(action) {
                case 'power':
                    window.location.href = "{{ path('app_pilulier_power', {'id': pilulier.id}) }}";
                    break;
                case 'remote':
                    window.location.href = "{{ path('app_pilulier_remote', {'id': pilulier.id}) }}";
                    break;
                case 'motorTest':
                    window.location.href = "{{ path('app_pilulier_test_motor', {'id': pilulier.id}) }}";
                    break;
                case 'changeDeliveryTimes':
                    window.location.href = "{{ path('app_pilulier_change_hours', {'id': pilulier.id}) }}";
                    break;
            }
        }
    </script>
{% endblock %}

{% block body %}
<body class="bg-orange-50 dark:bg-gray-900 transition-colors duration-300">

  <main class="flex items-center justify-center min-h-screen p-4">
    <div class="bg-white dark:bg-gray-800 rounded-lg shadow-md w-full max-w-md p-6">
      <h1 class="text-2xl font-bold mb-4 text-gray-900 dark:text-white text-center">Controle du Pilulier</h1>
      
      <div class="space-y-4">
        <div class="flex justify-between items-center">
          <span class="font-semibold text-gray-700 dark:text-gray-300">ID:</span>
          <span class="text-gray-900 dark:text-white">{{ pilulier.id }}</span>
        </div>
        
        <div class="flex justify-between items-center">
          <span class="font-semibold text-gray-700 dark:text-gray-300">Bouton d'urgence : </span>
          <label class="relative inline-flex items-center cursor-pointer">
            <input type="checkbox" id="emergencyButton" class="sr-only peer" {{ pilulier.activationBoutonUrgence ? 'checked' : '' }}>
            <div class="w-11 h-6 bg-gray-200 peer-focus:outline-none peer-focus:ring-4 peer-focus:ring-orange-300 dark:peer-focus:ring-orange-800 rounded-full peer dark:bg-gray-700 peer-checked:after:translate-x-full peer-checked:after:border-white after:content-[''] after:absolute after:top-[2px] after:left-[2px] after:bg-white after:border-gray-300 after:border after:rounded-full after:h-5 after:w-5 after:transition-all dark:border-gray-600 peer-checked:bg-orange-500"></div>
          </label>
        </div>
        
        <button id="togglePilulier" class="w-full bg-orange-500 hover:bg-orange-600 text-white font-bold py-2 px-4 rounded transition duration-300">
         Ouvrir le pilulier
        </button>
        
        <button onclick="handleAction('changeDeliveryTimes')" class="w-full bg-gray-200 hover:bg-gray-300 dark:bg-gray-700 dark:hover:bg-gray-600 text-gray-800 dark:text-white font-bold py-2 px-4 rounded transition duration-300">
          Changer les heures de délivrement
        </button>
        
        <div class="grid grid-cols-3 gap-2">
          <button class="bg-gray-200 hover:bg-gray-300 dark:bg-gray-700 dark:hover:bg-gray-600 text-gray-800 dark:text-white font-bold py-2 px-4 rounded flex items-center justify-center transition duration-300" onclick="handleAction('power')">
            <i data-lucide="power" class="w-4 h-4"></i>
          </button>
          <button class="bg-gray-200 hover:bg-gray-300 dark:bg-gray-700 dark:hover:bg-gray-600 text-gray-800 dark:text-white font-bold py-2 px-4 rounded flex items-center justify-center transition duration-300" onclick="handleAction('remote')">
            <i data-lucide="radio" class="w-4 h-4"></i>
          </button>
          <button class="bg-gray-200 hover:bg-gray-300 dark:bg-gray-700 dark:hover:bg-gray-600 text-gray-800 dark:text-white font-bold py-2 px-4 rounded flex items-center justify-center transition duration-300" onclick="handleAction('motorTest')">
            <i data-lucide="settings" class="w-4 h-4"></i>
          </button>
        </div>
      </div>
      
      <div class="mt-4">
        {{ include('pilulier/_delete_form.html.twig', {button_label: false}) }}
      </div>
    </div>
  </main>
</body>
{% endblock %}